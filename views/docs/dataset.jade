//
   Created by agescura on 19/1/16.

doctype html
html(lang='en', ng-app='demoapp')
    head
        meta(charset='utf-8')
        meta(http-equiv='X-UA-Compatible', content='IE=edge')
        meta(name='viewport', content='width=device-width, initial-scale=1')
        meta(name='description', content='')
        meta(name='author', content='')
        link(rel='icon', href='../../favicon.ico')
        title Narrow Jumbotron Template for Bootstrap
        link(href='/bower_components/bootstrap/dist/css/bootstrap.min.css', rel='stylesheet')
        link(rel='stylesheet', href='/bower_components/leaflet/dist/leaflet.css')

        //if lt IE 9
          script(src='https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js')
          script(src='https://oss.maxcdn.com/respond/1.4.2/respond.min.js')
    body(ng-controller='LeafletController')
        .container
            .header.clearfix
                nav
                    ul.nav.nav-pills.pull-right
                        li.active(role='presentation')
                            a(href='#') Home
                        li(role='presentation')
                            a(href='#') About
                        li(role='presentation')
                            a(href='#') Contact
                h3.text-muted UJI Open Data
            .jumbotron
                h1 #{structure.name}
                p.lead
                    | #{structure.description}
            .content
                .container
                    .row
                        .col-sm-12
                            leaflet(defaults='defaults', geojson="geojson", lf-center='center', width='97%', height='460px')
                    .row
                        .col-sm-12
                            .page-header
                                h1
                                    | Dataset
                                    small List
                            .panel
                                .panel-body
                                    if dataset.length
                                        table.table.table-bordered
                                            thead
                                                tr
                                                    th #
                                                        each value, key in dataset[0]
                                                            th= key
                                            tbody
                                                - var formType = 'noType'
                                                - var formValue = 'noValue'
                                                each field in structure.fields
                                                    each value, key in field
                                                        if value.type == 'point' || value.type == 'line' || value.type == 'polygon'
                                                            - formType = key
                                                            - formValue = value.type
                                                each item, i in dataset
                                                    tr
                                                        td= i + 1
                                                        each val, key in item
                                                            if key == formType
                                                                td
                                                                    | #{formValue}
                                                            else
                                                                td= val
                                    else
                                        p Dataset is empty
                    .row
                        .page-header
                            h1 Export pdf

                    .row
                        .page-header
                            h1
                                | Fields of #{title}
                        if structure.fields.length
                            each field in structure.fields
                                each value, key in field
                                    .panel.panel-default
                                        .panel-heading
                                            p Field: #{key}
                                        .panel-body
                                            each v, k in value
                                                p #{k}: #{v}
                        else
                            p Structure is empty
                    .row
                        .page-header
                            h1 Spatial Analysis
                            .panel.panel-default
                                .panel-heading
                                    p /nearest
                                .panel-body
                                    p Description: takes lat and lng params and returns the point from the set closest to the reference
                                    p Example: /api/DrugstoresAlmassora/nearest?lat=-0.063389,lng=39.943329
                            .panel.panel-default
                                .panel-heading
                                    p /envelope
                                .panel-body
                                    p Description: returns a rectangular Polygon that encompasses all objects.
                                    p Example: /api/DrugstoresAlmassora/envelope



        script(src='/bower_components/jquery/dist/jquery.min.js')
        script(src='/bower_components/bootstrap/dist/js/bootstrap.min.js')
        script(src='/bower_components/angular/angular.min.js')
        script(src='/bower_components/leaflet/dist/leaflet.js')
        script(src='/bower_components/angular-leaflet-directive/dist/angular-leaflet-directive.js')
        script(src='/bower_components/turf/turf.js')
        script.
            var app = angular.module("demoapp", ['leaflet-directive']);
            app.controller("LeafletController", ['$scope', '$http', 'leafletData', function ($scope, $http, leafletData) {
                angular.extend($scope, {
                    defaults: {
                        maxZoom: 18,
                        minZoom: 0,
                        scrollWheelZoom: false
                    },
                    center: {
                        lat: #{structure.center.lat},
                        lng: #{structure.center.lng},
                        zoom: #{structure.center.zoom}
                    },
                    geojson: {
                        data: {},
                        style: {
                            fillColor: "green",
                            weight: 2,
                            opacity: 1,
                            color: 'white',
                            dashArray: '3',
                            fillOpacity: 0.7
                        }
                    }
                });
                var geographicType = 'undefined';

                var structure = !{JSON.stringify(structure)}
                if (structure.fields.length) {
                    for (var i = 0; i < structure.fields.length; i++) {
                        var name = Object.keys(structure.fields[i])[0];
                        if (structure.fields[i][name]["type"] == 'point' || structure.fields[i][name]["type"] == 'line' || structure.fields[i][name]["type"] == 'polygon') {
                            console.log(name);
                            geographicType = name;
                        }
                    }
                }

                var features = [];

                var dataset = !{JSON.stringify(dataset)}
                for (var i = 0; i < dataset.length; i++) {
                    console.log(dataset[i][geographicType]);
                    features.push(JSON.parse(dataset[i][geographicType]));
                }

                $scope.geojson.data = turf.featurecollection(features);
            }]);